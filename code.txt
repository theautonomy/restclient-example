// HttpMethod enum to represent different HTTP methods
enum HttpMethod {
    GET, POST, PUT, DELETE, PATCH, HEAD, OPTIONS
}

// Simple HttpHeaders class to manage headers
import java.util.*;

class HttpHeaders {
    private final Map<String, List<String>> headers = new HashMap<>();
    
    public void add(String name, String value) {
        headers.computeIfAbsent(name, k -> new ArrayList<>()).add(value);
    }
    
    public void set(String name, String value) {
        headers.put(name, Arrays.asList(value));
    }
    
    public List<String> get(String name) {
        return headers.getOrDefault(name, Collections.emptyList());
    }
    
    public String getFirst(String name) {
        List<String> values = get(name);
        return values.isEmpty() ? null : values.get(0);
    }
    
    public Set<String> keySet() {
        return headers.keySet();
    }
}

// ResponseEntity to wrap response data
class ResponseEntity<T> {
    private final T body;
    private final HttpHeaders headers;
    private final int statusCode;
    
    public ResponseEntity(T body, HttpHeaders headers, int statusCode) {
        this.body = body;
        this.headers = headers;
        this.statusCode = statusCode;
    }
    
    public T getBody() { return body; }
    public HttpHeaders getHeaders() { return headers; }
    public int getStatusCode() { return statusCode; }
    public boolean is2xxSuccessful() { return statusCode >= 200 && statusCode < 300; }
}

// Functional interfaces for request/response processing
interface RequestHeadersSpec<S extends RequestHeadersSpec<S>> {
    S header(String name, String... values);
    S headers(HttpHeaders headers);
}

interface RequestBodySpec extends RequestHeadersSpec<RequestBodySpec> {
    RequestBodySpec body(Object body);
}

interface ResponseSpec {
    <T> T body(Class<T> bodyType);
    <T> ResponseEntity<T> toEntity(Class<T> bodyType);
    ResponseEntity<Void> toBodilessEntity();
}

// Main RestClient interface
interface RestClient {
    
    // HTTP method specifications
    RequestHeadersSpec<?> get();
    RequestBodySpec post();
    RequestBodySpec put();
    RequestBodySpec patch();
    RequestHeadersSpec<?> delete();
    RequestHeadersSpec<?> head();
    RequestHeadersSpec<?> options();
    
    // Method with URI
    RequestHeadersSpec<?> method(HttpMethod method);
    
    // Builder interface
    interface Builder {
        Builder baseUrl(String baseUrl);
        Builder defaultHeader(String name, String... values);
        Builder defaultHeaders(HttpHeaders headers);
        RestClient build();
    }
    
    static Builder builder() {
        return new RestClientImpl.BuilderImpl();
    }
    
    static RestClient create() {
        return builder().build();
    }
    
    static RestClient create(String baseUrl) {
        return builder().baseUrl(baseUrl).build();
    }
}

// Implementation classes
class RestClientImpl implements RestClient {
    private final String baseUrl;
    private final HttpHeaders defaultHeaders;
    
    private RestClientImpl(String baseUrl, HttpHeaders defaultHeaders) {
        this.baseUrl = baseUrl != null ? baseUrl : "";
        this.defaultHeaders = defaultHeaders != null ? defaultHeaders : new HttpHeaders();
    }
    
    @Override
    public RequestHeadersSpec<?> get() {
        return new RequestSpec(HttpMethod.GET, baseUrl, defaultHeaders);
    }
    
    @Override
    public RequestBodySpec post() {
        return new RequestSpec(HttpMethod.POST, baseUrl, defaultHeaders);
    }
    
    @Override
    public RequestBodySpec put() {
        return new RequestSpec(HttpMethod.PUT, baseUrl, defaultHeaders);
    }
    
    @Override
    public RequestBodySpec patch() {
        return new RequestSpec(HttpMethod.PATCH, baseUrl, defaultHeaders);
    }
    
    @Override
    public RequestHeadersSpec<?> delete() {
        return new RequestSpec(HttpMethod.DELETE, baseUrl, defaultHeaders);
    }
    
    @Override
    public RequestHeadersSpec<?> head() {
        return new RequestSpec(HttpMethod.HEAD, baseUrl, defaultHeaders);
    }
    
    @Override
    public RequestHeadersSpec<?> options() {
        return new RequestSpec(HttpMethod.OPTIONS, baseUrl, defaultHeaders);
    }
    
    @Override
    public RequestHeadersSpec<?> method(HttpMethod method) {
        return new RequestSpec(method, baseUrl, defaultHeaders);
    }
    
    // Builder implementation
    static class BuilderImpl implements Builder {
        private String baseUrl;
        private HttpHeaders defaultHeaders = new HttpHeaders();
        
        @Override
        public Builder baseUrl(String baseUrl) {
            this.baseUrl = baseUrl;
            return this;
        }
        
        @Override
        public Builder defaultHeader(String name, String... values) {
            for (String value : values) {
                defaultHeaders.add(name, value);
            }
            return this;
        }
        
        @Override
        public Builder defaultHeaders(HttpHeaders headers) {
            for (String name : headers.keySet()) {
                for (String value : headers.get(name)) {
                    defaultHeaders.add(name, value);
                }
            }
            return this;
        }
        
        @Override
        public RestClient build() {
            return new RestClientImpl(baseUrl, defaultHeaders);
        }
    }
}

// Request specification implementation
class RequestSpec implements RequestBodySpec {
    private final HttpMethod method;
    private final String baseUrl;
    private final HttpHeaders headers;
    private String uri = "";
    private Object requestBody;
    
    public RequestSpec(HttpMethod method, String baseUrl, HttpHeaders defaultHeaders) {
        this.method = method;
        this.baseUrl = baseUrl;
        this.headers = new HttpHeaders();
        
        // Copy default headers
        for (String name : defaultHeaders.keySet()) {
            for (String value : defaultHeaders.get(name)) {
                this.headers.add(name, value);
            }
        }
    }
    
    public RequestSpec uri(String uri) {
        this.uri = uri;
        return this;
    }
    
    public RequestSpec uri(String uri, Object... uriVariables) {
        // Simple URI template processing (basic implementation)
        String processedUri = uri;
        for (int i = 0; i < uriVariables.length; i++) {
            processedUri = processedUri.replace("{" + i + "}", uriVariables[i].toString());
        }
        this.uri = processedUri;
        return this;
    }
    
    @Override
    public RequestSpec header(String name, String... values) {
        for (String value : values) {
            headers.add(name, value);
        }
        return this;
    }
    
    @Override
    public RequestSpec headers(HttpHeaders headers) {
        for (String name : headers.keySet()) {
            for (String value : headers.get(name)) {
                this.headers.add(name, value);
            }
        }
        return this;
    }
    
    @Override
    public RequestHeadersSpec<?> body(Object body) {
        this.requestBody = body;
        return this;
    }
    
    // Terminal operations
    public ResponseSpec retrieve() {
        return new ResponseSpecImpl(this);
    }
    
    public <T> ResponseEntity<T> exchange(Class<T> responseType) {
        return executeRequest(responseType);
    }
    
    // Simulate HTTP request execution
    private <T> ResponseEntity<T> executeRequest(Class<T> responseType) {
        String fullUrl = baseUrl + uri;
        
        System.out.println("Executing " + method + " request to: " + fullUrl);
        System.out.println("Headers: " + headers.keySet());
        if (requestBody != null) {
            System.out.println("Request body: " + requestBody);
        }
        
        // Simulate response
        HttpHeaders responseHeaders = new HttpHeaders();
        responseHeaders.set("Content-Type", "application/json");
        
        T responseBody = null;
        if (responseType == String.class) {
            responseBody = responseType.cast("{\"message\": \"Success\", \"method\": \"" + method + "\"}");
        } else if (responseType == Void.class) {
            responseBody = null;
        }
        
        return new ResponseEntity<>(responseBody, responseHeaders, 200);
    }
    
    // Response specification implementation
    private static class ResponseSpecImpl implements ResponseSpec {
        private final RequestSpec requestSpec;
        
        public ResponseSpecImpl(RequestSpec requestSpec) {
            this.requestSpec = requestSpec;
        }
        
        @Override
        public <T> T body(Class<T> bodyType) {
            ResponseEntity<T> response = requestSpec.executeRequest(bodyType);
            return response.getBody();
        }
        
        @Override
        public <T> ResponseEntity<T> toEntity(Class<T> bodyType) {
            return requestSpec.executeRequest(bodyType);
        }
        
        @Override
        public ResponseEntity<Void> toBodilessEntity() {
            return requestSpec.executeRequest(Void.class);
        }
    }
}

// Demo class showing usage
public class RestClientDemo {
    public static void main(String[] args) {
        System.out.println("=== RestClient Demo ===\n");
        
        // Create RestClient with base URL
        RestClient client = RestClient.builder()
            .baseUrl("https://api.example.com")
            .defaultHeader("User-Agent", "RestClient-Demo/1.0")
            .defaultHeader("Accept", "application/json")
            .build();
        
        // Example 1: Simple GET request
        System.out.println("1. Simple GET request:");
        String response1 = client.get()
            .uri("/users/{id}", 123)
            .header("Authorization", "Bearer token123")
            .retrieve()
            .body(String.class);
        System.out.println("Response: " + response1);
        System.out.println();
        
        // Example 2: POST request with body
        System.out.println("2. POST request with body:");
        Map<String, Object> user = new HashMap<>();
        user.put("name", "John Doe");
        user.put("email", "john@example.com");
        
        ResponseEntity<String> response2 = client.post()
            .uri("/users")
            .header("Content-Type", "application/json")
            .body(user)
            .retrieve()
            .toEntity(String.class);
        
        System.out.println("Status: " + response2.getStatusCode());
        System.out.println("Response: " + response2.getBody());
        System.out.println();
        
        // Example 3: PUT request
        System.out.println("3. PUT request:");
        user.put("id", 123);
        user.put("name", "John Smith");
        
        String response3 = client.put()
            .uri("/users/{id}", 123)
            .body(user)
            .retrieve()
            .body(String.class);
        System.out.println("Response: " + response3);
        System.out.println();
        
        // Example 4: DELETE request
        System.out.println("4. DELETE request:");
        ResponseEntity<Void> response4 = client.delete()
            .uri("/users/{id}", 123)
            .retrieve()
            .toBodilessEntity();
        System.out.println("Status: " + response4.getStatusCode());
        System.out.println();
        
        // Example 5: Using method() with custom headers
        System.out.println("5. Custom method with headers:");
        HttpHeaders customHeaders = new HttpHeaders();
        customHeaders.set("X-Custom-Header", "custom-value");
        customHeaders.set("X-Request-ID", "req-12345");
        
        String response5 = client.method(HttpMethod.GET)
            .uri("/health")
            .headers(customHeaders)
            .retrieve()
            .body(String.class);
        System.out.println("Response: " + response5);
        System.out.println();
        
        // Example 6: Create simple client without base URL
        System.out.println("6. Simple client without base URL:");
        RestClient simpleClient = RestClient.create();
        String response6 = simpleClient.get()
            .uri("https://httpbin.org/get")
            .retrieve()
            .body(String.class);
        System.out.println("Response: " + response6);
    }
}